name: Deploy to Amazon EC2
on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sparta-spring-4/delivery
  VERSION: latest

jobs:
  Deploy:
    name: Build Docker Image and Deploy EC2
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    environment: deploy

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK # JDK 지정
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Build container image
        run: |
          IMAGE=$REGISTRY/$IMAGE_NAME:$VERSION
          chmod +x gradlew
          ./gradlew bootJar
          docker build -t $IMAGE .
          echo "IMAGE_URI=$IMAGE" >> $GITHUB_ENV

      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish container image
        run: docker push ${{ env.IMAGE_URI }}

      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_IP }} 
          username: ${{ secrets.REMOTE_USER }} 
          key: ${{ secrets.REMOTE_PRIVATE_KEY }} 
          port: ${{ secrets.REMOTE_SSH_PORT }} 
          script: |
            echo "--- 배포 시작 ---"
            # 1. 기존 컨테이너 중지/삭제
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            
            # 2. 이전 이미지 제거 (재사용 방지)
            sudo docker rmi ${{ env.IMAGE_URI }} || true

            # 3. GHCR 로그인 (GITHUB_TOKEN 사용)
            echo "--- GHCR 로그인 ---"
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 4. 최신 이미지 Pull
            echo "--- 이미지 Pull ---"
            sudo docker pull ${{ env.IMAGE_URI }}

            # 5. 새 컨테이너 실행 (포트 3000:8080 매핑)
            echo "--- 새 컨테이너 실행 ---"
            sudo docker run -d --name myapp -p 3000:8080 \
            -e DB_URL="${{ secrets.DB_URL }}" \
            -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e DB_DDL_AUTO=update \
            ${{ env.IMAGE_URI }}

            echo "--- 배포 완료: http://[EC2 IP]:3000 ---"
